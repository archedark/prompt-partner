# Product Requirements Document (PRD): Promptner Web Application

**Product Name**: Promptner  
**Version**: 1.0 (MVP)  
**Date**: February 2025  

---

## 1. Introduction

### Purpose
Promptner is a web-based tool designed to help you store, organize, and combine prompts efficiently. It includes a tagging system for categorization and allows you to select multiple prompts, merge them into a single "Master Prompt," and copy it to your clipboard—all with a focus on speed and simplicity. It now integrates backend filesystem watching for dynamic directory prompt management.

### Target Audience
You, the creator, are the primary user. This tool is built for personal use to streamline your prompt management process.

### Goals
- Quickly store and retrieve prompts with tags.
- Combine selected prompts into a single "Master Prompt."
- Enable easy copying to the clipboard.
- Dynamically manage directory-based prompts via backend filesystem watching.
- Develop and deploy the MVP within a single evening using AI-assisted coding.

---

## 2. Key Features

The MVP will prioritize the following core functionalities:

1. **Prompt Management**
   - Add new prompts with text and optional tags.
   - Edit existing prompts.
   - Delete prompts.

2. **Prompt List**
   - Display all prompts (regular and directory-based) with checkboxes for selection.
   - Show tags alongside each prompt.
   - Expandable/collapsible prompt entries to manage screen space efficiently, including directory file trees.

3. **Master Prompt Generation**
   - Combine selected prompts (including checked directory files) into a "Master Prompt."
   - Provide a button to copy the result to the clipboard.

4. **User Interface**
   - A minimalistic, single-page design with a prompt list, editor, and Master Prompt display.
   - Directory selection via a file picker.

5. **Backend Filesystem Watching**
   - Watch a user-specified local directory for changes, updating the prompt list dynamically.
   - Persist directory state (path, files, checkbox states) across sessions.

---

## 3. Functional Requirements

### 3.1 Prompt Management
- **Create Prompt**: Enter prompt text and optional tags (comma-separated) in a form to add a new prompt.
- **Edit Prompt**: Modify the text and tags of an existing prompt via the same form.
- **Delete Prompt**: Remove a prompt from the list with a single action (e.g., a delete button).

### 3.2 Prompt List
- List all prompts in a scrollable container.
- Each prompt displays:
  - A checkbox for selection.
  - The prompt text (truncated in collapsed view) or directory path for directory prompts.
  - Associated tags.
  - An expand/collapse toggle button.
  - A token count (for regular prompts).
- Directory prompts (when expanded):
  - Show a file tree with checkboxes for each file.
  - Exclude files based on `.gitignore` patterns (if present).
- Order prompts by creation date (newest first).
- Expanded view shows:
  - Full prompt text without truncation (scrollable if necessary) or file tree for directories.
  - Complete tag list with better formatting.
  - Metadata (e.g., creation date, last modified).
- Collapsed view shows:
  - First 2-3 lines of prompt text or directory path.
  - Truncated tag list with indicator for additional tags.
  - Visual indicator for expanded/collapsed state.
- State persistence:
  - Remember expanded/collapsed state between sessions (frontend TBD).
  - Persist directory path and file checkbox states in the backend database.

### 3.3 Master Prompt
- Combine the text of all selected prompts (via checkboxes) in the order they appear in the list.
- For directory prompts, include a formatted directory tree followed by contents of checked files.
- Display the combined text in a dedicated text area.
- Include a "Copy to Clipboard" button to copy the Master Prompt.

### 3.4 User Interface
- Single-page layout with:
  - **Header**: App title (e.g., "Prompt Builder").
  - **Prompt List**: Scrollable list of prompts with checkboxes and file trees for directories.
  - **Prompt Editor**: Form for adding or editing prompts.
  - **Master Prompt Section**: Text area and copy button.
  - **Directory Picker**: Button to select a local directory.
- Keep the design clean and functional for rapid development.

### 3.5 Backend Filesystem Watching
- **Directory Selection**: Frontend sends the selected directory path to the backend via `POST /directory`.
- **Watching**: Backend watches the directory for changes using Node.js `fs.watch`, updating the prompt list.
- **State Management**: Persist directory path and file checkbox states in the SQLite database.
- **API Integration**: 
  - `GET /prompts` includes directory prompts with file data.
  - `PUT /directory/:id/file` updates file checkbox states.

---

## 4. Technical Requirements

### 4.1 Frontend
- **Framework**: React.js (using `create-react-app` for speed).
- **Components**:
  - `PromptList`: Renders the list of prompts with checkboxes and directory file trees.
  - `PromptEditor`: Form for creating or editing prompts.
  - `MasterPrompt`: Displays the combined text and copy button.
- **State Management**: Use React’s `useState` or Context API.
- **Clipboard**: Implement the Clipboard API (`navigator.clipboard.writeText`).
- **Directory Picker**: Use `<input type="file" webkitdirectory>` to select directories.

### 4.2 Backend
- **Framework**: Node.js with Express.js.
- **Database**: SQLite (via `sqlite3` or `better-sqlite3`) for simplicity.
- **Filesystem Watching**: Use Node.js `fs.watch` to monitor a local directory.
- **API Endpoints**:
  - `POST /prompts`: Create a prompt.
  - `GET /prompts`: Fetch all prompts (regular and directory-based).
  - `PUT /prompts/:id`: Update a prompt.
  - `DELETE /prompts/:id`: Delete a prompt.
  - `POST /directory`: Receive a directory path and start watching.
  - `PUT /directory/:id/file`: Update a file’s checkbox state in a directory prompt.

### 4.3 Data Model
- **Prompt Table**:
  - `id`: Integer (auto-incrementing primary key).
  - `name`: Text (prompt or directory name).
  - `content`: Text (the prompt itself or directory path for directory prompts).
  - `tags`: Text (comma-separated tags, e.g., "coding, AI").
  - `is_directory`: Boolean (true for directory prompts).
  - `files`: JSON (array of file objects for directory prompts: `{ path, content, isChecked }`).

### 4.4 Deployment
Assume local execution for filesystem watching. This project is open source and for personal use.

---

## 5. Non-Functional Requirements

- **Performance**: Handle up to 10000 prompts and directory files with no noticeable lag.
- **Usability**: Ensure intuitive navigation with minimal clicks.
- **Security**: No authentication needed (personal use, local backend assumed).
- **Browser Compatibility**: Works on Chrome, Firefox, and Edge.

---

## 6. Development Plan
See plan.md.


---

## 7. Conclusion

This PRD outlines a lean, functional Prompt Builder MVP with backend filesystem watching for directory prompts. It focuses on your core needs—prompt storage, tagging, combination, and dynamic directory management—while keeping the tech stack simple (React, Node.js, SQLite). Follow the development plan, leverage AI tools, and you'll have a working app by morning. Let me know if you need help coding any specific part—happy building!